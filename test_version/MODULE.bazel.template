"""Bazel module template for //:test_version.sh tests"""

module(name = "rules_scala_test_version")

bazel_dep(name = "rules_scala")
local_path_override(
    module_name = "rules_scala",
    path = "../..",
)

bazel_dep(name = "latest_dependencies", dev_dependency = True)
local_path_override(
    module_name = "latest_dependencies",
    path = "../../deps/latest",
)

bazel_dep(name = "rules_java", version = "8.15.1")
bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_shell", version = "0.5.1")
bazel_dep(name = "protobuf", repo_name = "com_google_protobuf")

# Temporarily required for `protoc` toolchainization until resolution of
# protocolbuffers/protobuf#19679.
single_version_override(
    module_name = "protobuf",
    patch_strip = 1,
    patches = ["//:protobuf.patch"],
    version = "32.1",
)

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(
    enable_compiler_dependency_tracking = True,
)
use_repo(scala_config, "rules_scala_config")

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
    dev_dependency = True,
)
scala_deps.settings(
    fetch_sources = True,
)
scala_deps.scala()
scala_deps.scala_proto()
scala_deps.scalatest()
scala_deps.specs2()

scrooge_version = "${scrooge_version}"

scrooge_version_or_default = "21.2.0" if scrooge_version == "" else scrooge_version

test_version_maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
test_version_maven.install(
    name = "test_version_maven",
    artifacts = [
        "com.twitter:scrooge-core_2.11:{}".format(scrooge_version_or_default),
        "com.twitter:scrooge-generator_2.11:{}".format(scrooge_version_or_default),
        "com.twitter:util-core_2.11:{}".format(scrooge_version_or_default),
        "com.twitter:util-logging_2.11:{}".format(scrooge_version_or_default),
    ],
    # Don't pull in conflicting versions of the standard library
    excluded_artifacts = [
        "org.scala-lang:scala-library",
        "org.scala-lang:scala-reflect",
    ],
    fetch_sources = True,
    repositories = [
        "https://repo.maven.apache.org/maven2",
        "https://maven-central.storage-download.googleapis.com/maven2",
        "https://mirror.bazel.build/repo1.maven.org/maven2",
        "https://jcenter.bintray.com",
    ],
)
use_repo(test_version_maven, "test_version_maven")

scala_toolchains_repo = use_repo_rule("@rules_scala//scala:toolchains_repo.bzl", "scala_toolchains_repo")

scala_toolchains_repo(
    name = "twitter_scrooge_test_toolchain",
    scala = False,
    twitter_scrooge = True,
    twitter_scrooge_deps = {} if scrooge_version == "" else {
        "scrooge_core": "@test_version_maven//:com_twitter_scrooge_core_2_11",
        "scrooge_generator": "@test_version_maven//:com_twitter_scrooge_generator_2_11",
        "util_core": "@test_version_maven//:com_twitter_util_core_2_11",
        "util_logging": "@test_version_maven//:com_twitter_util_logging_2_11",
    },
)

scala_protoc = use_extension(
    "@rules_scala//scala/extensions:protoc.bzl",
    "scala_protoc",
    dev_dependency = True,
)
use_repo(scala_protoc, "rules_scala_protoc_toolchains")

register_toolchains(
    "@rules_scala_protoc_toolchains//...:all",
    "@rules_scala//scala:unused_dependency_checker_error_toolchain",
    "@twitter_scrooge_test_toolchain//...:all",
)
