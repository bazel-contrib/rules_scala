"""Bazel module ./test/shell/test_examples.sh tests"""

module(name = "multi_frameworks_toolchain")

SCALA_VERSION = "2.12.20"

VERSION_SUFFIX = "_" + SCALA_VERSION.replace(".", "_")

bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_scala")
local_path_override(
    module_name = "rules_scala",
    path = "../../..",
)

bazel_dep(name = "latest_dependencies", dev_dependency = True)
local_path_override(
    module_name = "latest_dependencies",
    path = "../../../deps/latest",
)

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(
    scala_version = SCALA_VERSION,
)
use_repo(scala_config, "rules_scala_config")

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
    dev_dependency = True,
)
scala_deps.settings(
    fetch_sources = True,
)
scala_deps.scala()
scala_deps.junit()
scala_deps.scalatest()
scala_deps.specs2()

# Please keep this in sync with `MODULE.bazel`. We're forced to duplicate it because:
# 1. `@rules_scala_maven//...` (the repository the default testing toolchain uses) isn't accessible from here
# 2. There's no way to share this with `MODULE.bazel`
#   -  [include](https://bazel.build/rules/lib/globals/module#include) exists, but it's only permitted in top-level
#      `MODULE.bazel` files. If `rules_scala` is used as a dependency of another module, its `MODULE.bazel` file isn't
#      considered top-level.
scalatest_version = "3.2.19"

specs2_pre_2_13_version = "4.4.1"

specs2_2_13_version = "4.10.3"

specs2_3_version = "5.0.0-RC-21"

junit_artifacts = [
    ("junit", "junit", "4.12", None),
    ("org.hamcrest", "hamcrest-core", "1.3", None),
]

scalatest_artifacts = [
    ("org.scalatest", "scalatest-compatible", scalatest_version, None),
] + [
    (group, name, scalatest_version, scala_version)
    for scala_version in [
        "2.11",
        "2.12",
        "2.13",
        "3",
    ]
    for (group, name) in [
        ("org.scalactic", "scalactic"),
        ("org.scalatest", "scalatest"),
        ("org.scalatest", "scalatest-core"),
        ("org.scalatest", "scalatest-diagrams"),
        ("org.scalatest", "scalatest-featurespec"),
        ("org.scalatest", "scalatest-flatspec"),
        ("org.scalatest", "scalatest-freespec"),
        ("org.scalatest", "scalatest-funspec"),
        ("org.scalatest", "scalatest-funsuite"),
        ("org.scalatest", "scalatest-matchers-core"),
        ("org.scalatest", "scalatest-mustmatchers"),
        ("org.scalatest", "scalatest-propspec"),
        ("org.scalatest", "scalatest-refspec"),
        ("org.scalatest", "scalatest-shouldmatchers"),
        ("org.scalatest", "scalatest-wordspec"),
    ]
]

specs2_artifacts = [
    ("org.specs2", name, version, scala_version)
    for scala_version, version in [
        ("2.11", specs2_pre_2_13_version),
        ("2.12", specs2_pre_2_13_version),
        ("2.13", specs2_2_13_version),
        ("3", specs2_3_version),
    ]
    for name in [
        "specs2-common",
        "specs2-core",
        "specs2-fp",
        "specs2-matcher",
    ]
]

specs2_junit_artifacts = [
    ("org.specs2", "specs2-junit", version, scala_version)
    for scala_version, version in [
        ("2.11", specs2_pre_2_13_version),
        ("2.12", specs2_pre_2_13_version),
        ("2.13", specs2_2_13_version),
        ("3", specs2_3_version),
    ]
]

multi_frameworks_toolchain_maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
multi_frameworks_toolchain_maven.install(
    name = "multi_frameworks_toolchain_maven",
    artifacts = [
        "{}:{}{}:{}".format(
            group,
            name,
            "" if scala_version == None else "_{}".format(scala_version),
            version,
        )
        for group, name, version, scala_version in (
            junit_artifacts + scalatest_artifacts + specs2_artifacts + specs2_junit_artifacts
        )
    ],
    # Don't pull in conflicting versions of the standard library
    excluded_artifacts = [
        "org.scala-lang:scala-library",
        "org.scala-lang:scala-reflect",
    ],
    fetch_sources = True,
    lock_file = "//:maven.json",
    repositories = [
        "https://repo.maven.apache.org/maven2",
        "https://maven-central.storage-download.googleapis.com/maven2",
        "https://mirror.bazel.build/repo1.maven.org/maven2",
        "https://jcenter.bintray.com",
    ],
)
use_repo(multi_frameworks_toolchain_maven, "multi_frameworks_toolchain_maven")

scala_protoc = use_extension(
    "@rules_scala//scala/extensions:protoc.bzl",
    "scala_protoc",
    dev_dependency = True,
)
use_repo(scala_protoc, "rules_scala_protoc_toolchains")

register_toolchains(
    "@rules_scala_protoc_toolchains//...:all",
    "//:testing_toolchain",
    dev_dependency = True,
)

# Temporarily required for `protoc` toolchainization until resolution of
# protocolbuffers/protobuf#19679.
bazel_dep(name = "protobuf", repo_name = "com_google_protobuf")
single_version_override(
    module_name = "protobuf",
    patch_strip = 1,
    patches = ["//:protobuf.patch"],
    version = "32.1",
)
