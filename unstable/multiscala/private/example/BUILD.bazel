load(
    "@io_bazel_rules_scala//scala:scala.bzl",
    "scala_binary",
    "scala_library",
    "scala_test",
)

load(
    "@io_bazel_rules_scala//unstable/multiscala:multiscala.bzl",
    toolchain_label = "toolchain_label",
)

# default case: builds all configured versions with version suffixes

scala_library(
    name = "library",
    srcs = glob(
        ["*.scala"],
        exclude = ["*Test.scala"],
    ),
)

scala_binary(
    name = "app",
    main_class = "App",
    scala_runtime_deps = [":library"],
)

scala_test(
    name = "test",
    srcs = ["AppTest.scala"],
    scala_deps = [":library"],
)

# explict version configuration

scala_library(
    name = "library_with_explict_version",
    srcs = ["App.scala"],
    scala = "2.12",
)

scala_binary(
    name = "app_with_explict_version",
    main_class = "App",
    scala = "2.12",
    scala_runtime_deps = [":library_with_explict_version"],
)

scala_test(
    name = "test_with_explict_version",
    srcs = ["AppTest.scala"],
    scala = "2.12",
    scala_deps = [":library_with_explict_version"],
)

# explict toolchain configuration: this disabled multiscala: you're on your own ...

scala_library(
    name = "library_with_explict_toolchain",
    srcs = ["App.scala"],
    toolchains = [toolchain_label("scala", "2.11")],
)

scala_binary(
    name = "app_with_explict_toolchain",
    main_class = "App",
    toolchains = [toolchain_label("scala", "2.11")],
    runtime_deps = [":library_with_explict_toolchain"],
)

scala_test(
    name = "test_with_explict_toolchain",
    srcs = ["AppTest.scala"],
    toolchains = [toolchain_label("scala", "2.11")],
    deps = [":library_with_explict_toolchain"],
)
