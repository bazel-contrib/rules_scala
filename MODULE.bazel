"""Bazel module definition for rules_scala"""

module(
    name = "rules_scala",
    version = "7.1.2",
    bazel_compatibility = [">=7.1.0"],
    compatibility_level = 7,
)

SCALA_VERSION = "2.12.20"

# These versions match those required by some tests, including
# test_thirdparty_version.sh.
SCALA_2_VERSIONS = [
    "2.11.12",
    "2.12.20",
    "2.13.16",
]

SCALA_3_VERSIONS = [
    "3.1.3",
    "3.3.6",
    "3.5.2",
    "3.6.4",
    "3.7.3",
]

SCALA_VERSIONS = SCALA_2_VERSIONS + SCALA_3_VERSIONS

bazel_dep(name = "bazel_skylib", version = "1.6.0")
single_version_override(
    module_name = "bazel_skylib",
    version = "1.8.1",
)

bazel_dep(name = "platforms", version = "0.0.9")
single_version_override(
    module_name = "platforms",
    version = "1.0.0",
)

bazel_dep(name = "rules_java", version = "7.6.0")
single_version_override(
    module_name = "rules_java",
    version = "8.15.2",
)

bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_proto", version = "6.0.0")
single_version_override(
    module_name = "rules_proto",
    version = "7.1.0",
)

bazel_dep(
    name = "protobuf",
    version = "28.2",
    repo_name = "com_google_protobuf",
)

# Temporarily required for `protoc` toolchainization until resolution of
# protocolbuffers/protobuf#19679.
single_version_override(
    module_name = "protobuf",
    patch_strip = 1,
    patches = ["//protoc:0001-protobuf-19679-rm-protoc-dep.patch"],
    version = "32.1",
)

# See //src/java/io/bazel/rulesscala/worker:worker_protocol_java_proto.
bazel_dep(name = "bazel_worker_api", version = "0.0.6")

scala_protoc = use_extension(
    "//scala/extensions:protoc.bzl",
    "scala_protoc",
    dev_dependency = True,
)
use_repo(scala_protoc, "rules_scala_protoc_toolchains")

scala_config = use_extension(
    "//scala/extensions:config.bzl",
    "scala_config",
)
use_repo(scala_config, "rules_scala_config")

dev_config = use_extension(
    "//scala/extensions:config.bzl",
    "scala_config",
    dev_dependency = True,
)
dev_config.settings(
    enable_compiler_dependency_tracking = True,
    scala_version = SCALA_VERSION,
    scala_versions = SCALA_VERSIONS,
)

scala_deps = use_extension("//scala/extensions:deps.bzl", "scala_deps")
use_repo(
    scala_deps,
    "rules_scala_toolchains",
    "scala_compiler_sources",
)

# Register some of our testing toolchains first when building our repo.
register_toolchains(
    # This is optional, but still safe to include even when not using
    # `--incompatible_enable_proto_toolchain_resolution`. Requires invoking the
    # `scala_protoc_toolchains` repo rule. Register this toolchain before any
    # others.
    "@rules_scala_protoc_toolchains//...:all",
    "//scala:unused_dependency_checker_error_toolchain",
    "//test/proto:scalapb_toolchain",
    "//test/toolchains:java21_toolchain_definition",
    dev_dependency = True,
)

register_toolchains("@rules_scala_toolchains//...:all")

# Dev dependencies

dev_deps = use_extension(
    "//scala/extensions:deps.bzl",
    "scala_deps",
    dev_dependency = True,
)
dev_deps.scala()
dev_deps.jmh()
dev_deps.junit()
dev_deps.scala_proto()
dev_deps.scalafmt()
dev_deps.scalatest()
dev_deps.specs2()
dev_deps.twitter_scrooge()
use_repo(
    dev_deps,
    "scala_proto_rules_scalapb_compilerplugin",
    "scala_proto_rules_scalapb_protoc_bridge",
)

# Default versions of version specific repos needed by some of our tests. Tests
# that set `--repo_env=SCALA_VERSION=...` break without using the default here,
# because version specific repos for other versions won't be available.
use_repo(
    dev_deps,
    "io_bazel_rules_scala_guava",
    "io_bazel_rules_scala_scala_compiler",
    "io_bazel_rules_scala_scala_library",
)

[
    [
        use_repo(dev_deps, dep + "_" + scala_version.replace(".", "_"))
        for dep in [
            "io_bazel_rules_scala_scala_compiler",
            "io_bazel_rules_scala_scala_library",
        ] + (
            # We can remove this condition once we drop support for Scala 2.11.
            [] if scala_version.startswith("2.11.") else [
                "scala_proto_rules_scalapb_protoc_gen",
            ]
        )
    ]
    for scala_version in SCALA_VERSIONS
]

[
    [
        use_repo(dev_deps, dep + "_" + scala_version.replace(".", "_"))
        for dep in [
            "io_bazel_rules_scala_scala_reflect",
        ]
    ]
    for scala_version in SCALA_2_VERSIONS
]

[
    [
        use_repo(dev_deps, dep + "_" + scala_version.replace(".", "_"))
        for dep in [
            "io_bazel_rules_scala_scala_compiler_2",
            "io_bazel_rules_scala_scala_library_2",
            "io_bazel_rules_scala_scala_reflect_2",
        ]
    ]
    for scala_version in SCALA_3_VERSIONS
]

# Please keep this in sync with `examples/testing/multi_frameworks_toolchain/MODULE.bazel`
jmh_version = "1.36"

scalatest_version = "3.2.19"

scopt_version = "4.0.0-RC2"

scrooge_version = "21.2.0"

specs2_pre_2_13_version = "4.4.1"

specs2_2_13_version = "4.10.3"

specs2_3_version = "5.0.0-RC-21"

asm_artifact = ("org.ow2.asm", "asm", "9.0", None)

commons_math3_artifact = ("org.apache.commons", "commons-math3", "3.6.1", None)

jmh_core_artifact = ("org.openjdk.jmh", "jmh-core", jmh_version, None)

jmh_generator_asm_artifact = ("org.openjdk.jmh", "jmh-generator-asm", jmh_version, None)

jmh_generator_reflection_artifact = ("org.openjdk.jmh", "jmh-generator-reflection", jmh_version, None)

jopt_simple_artifact = ("net.sf.jopt-simple", "jopt-simple", "5.0.4", None)

jmh_artifacts = [
    asm_artifact,
    commons_math3_artifact,
    jmh_core_artifact,
    jmh_generator_asm_artifact,
    jmh_generator_reflection_artifact,
    jopt_simple_artifact,
]

junit_artifacts = [
    ("junit", "junit", "4.12", None),
    ("org.hamcrest", "hamcrest-core", "1.3", None),
]

scalatest_artifacts = [
    ("org.scalatest", "scalatest-compatible", scalatest_version, None),
] + [
    (
        group,
        "{}_{}".format(name, scala_version),
        scalatest_version,
        scala_version,
    )
    for scala_version in [
        "2.11",
        "2.12",
        "2.13",
        "3",
    ]
    for (group, name) in [
        ("org.scalactic", "scalactic"),
        ("org.scalatest", "scalatest"),
        ("org.scalatest", "scalatest-core"),
        ("org.scalatest", "scalatest-diagrams"),
        ("org.scalatest", "scalatest-featurespec"),
        ("org.scalatest", "scalatest-flatspec"),
        ("org.scalatest", "scalatest-freespec"),
        ("org.scalatest", "scalatest-funspec"),
        ("org.scalatest", "scalatest-funsuite"),
        ("org.scalatest", "scalatest-matchers-core"),
        ("org.scalatest", "scalatest-mustmatchers"),
        ("org.scalatest", "scalatest-propspec"),
        ("org.scalatest", "scalatest-refspec"),
        ("org.scalatest", "scalatest-shouldmatchers"),
        ("org.scalatest", "scalatest-wordspec"),
    ]
]

specs2_artifacts = [
    (
        "org.specs2",
        "{}_{}".format(name, scala_version),
        version,
        scala_version,
    )
    for scala_version, version in [
        ("2.11", specs2_pre_2_13_version),
        ("2.12", specs2_pre_2_13_version),
        ("2.13", specs2_2_13_version),
        ("3", specs2_3_version),
    ]
    for name in [
        "specs2-common",
        "specs2-core",
        "specs2-fp",
        "specs2-matcher",
    ]
]

specs2_junit_artifacts = [
    (
        "org.specs2",
        "specs2-junit_{}".format(scala_version),
        version,
        scala_version,
    )
    for scala_version, version in [
        ("2.11", specs2_pre_2_13_version),
        ("2.12", specs2_pre_2_13_version),
        ("2.13", specs2_2_13_version),
        ("3", specs2_3_version),
    ]
]

scopt_artifacts = [
    ("com.github.scopt", "scopt_2.11", scopt_version, "2.11"),
    ("com.github.scopt", "scopt_2.12", scopt_version, "2.12"),
    ("com.github.scopt", "scopt_2.13", scopt_version, "2.13"),
    ("com.github.scopt", "scopt_2.13", scopt_version, "3"),
]

scrooge_core_artifacts = [
    ("com.twitter", "scrooge-core_2.11", scrooge_version, "2.11"),
    ("com.twitter", "scrooge-core_2.12", scrooge_version, "2.12"),
    ("com.twitter", "scrooge-core_2.13", scrooge_version, "2.13"),
    ("com.twitter", "scrooge-core_2.13", scrooge_version, "3"),
]

scrooge_generator_artifacts = [
    ("com.twitter", "scrooge-generator_2.11", scrooge_version, "2.11"),
    ("com.twitter", "scrooge-generator_2.12", scrooge_version, "2.12"),
    ("com.twitter", "scrooge-generator_2.13", scrooge_version, "2.13"),
    ("com.twitter", "scrooge-generator_2.13", scrooge_version, "3"),
]

util_core_artifacts = [
    ("com.twitter", "util-core_2.11", scrooge_version, "2.11"),
    ("com.twitter", "util-core_2.12", scrooge_version, "2.12"),
    ("com.twitter", "util-core_2.13", scrooge_version, "2.13"),
    ("com.twitter", "util-core_2.13", scrooge_version, "3"),
]

util_logging_artifacts = [
    ("com.twitter", "util-logging_2.11", scrooge_version, "2.11"),
    ("com.twitter", "util-logging_2.12", scrooge_version, "2.12"),
    ("com.twitter", "util-logging_2.13", scrooge_version, "2.13"),
    ("com.twitter", "util-logging_2.13", scrooge_version, "3"),
]

twitter_scrooge_artifacts = [
    ("com.github.spullara.mustache.java", "compiler", "0.8.18", None),
    ("javax.annotation", "javax.annotation-api", "1.3.2", None),
    ("org.apache.thrift", "libthrift", "0.10.0", None),
] + scopt_artifacts + scrooge_core_artifacts + scrooge_generator_artifacts + util_core_artifacts + util_logging_artifacts

create_toolchain_metadata = use_extension("//scala/private:create_toolchain_metadata.bzl", "create_toolchain_metadata")

[
    create_toolchain_metadata.artifact(
        name = name,
        group = group,
        scala_version = "" if scala_version == None else scala_version,
        toolchain_name = toolchain_name,
    )
    for artifacts, toolchain_name in [
        (
            [
                jmh_core_artifact,
                jmh_generator_asm_artifact,
                jmh_generator_reflection_artifact,
            ],
            "benchmark_generator",
        ),
        (
            [jmh_generator_asm_artifact],
            "benchmark_generator_runtime",
        ),
        (
            [
                commons_math3_artifact,
                jopt_simple_artifact,
            ],
            "jmh_classpath",
        ),
        (
            [jmh_core_artifact],
            "jmh_core",
        ),
        (junit_artifacts, "junit"),
        (scalatest_artifacts, "scalatest"),
        (scopt_artifacts, "scopt"),
        (scrooge_core_artifacts, "scrooge_core"),
        (scrooge_generator_artifacts, "scrooge_generator"),
        (specs2_artifacts, "specs2"),
        (specs2_junit_artifacts, "specs2_junit"),
        (util_core_artifacts, "util_core"),
        (util_logging_artifacts, "util_logging"),
    ]
    for group, name, _, scala_version in artifacts
]

use_repo(create_toolchain_metadata, "rules_scala_artifacts")

rules_scala_maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
rules_scala_maven.install(
    name = "rules_scala_maven",
    artifacts = [
        "{}:{}:{}".format(group, name, version)
        for group, name, version, _ in (
            jmh_artifacts + junit_artifacts + scalatest_artifacts + specs2_artifacts + specs2_junit_artifacts + twitter_scrooge_artifacts
        )
    ],
    # Don't pull in conflicting versions of the standard library
    excluded_artifacts = [
        "org.scala-lang:scala-library",
        "org.scala-lang:scala-reflect",
    ],
    fetch_sources = True,
    lock_file = "//:rules_scala_maven.json",
    repositories = [
        "https://repo.maven.apache.org/maven2",
        "https://maven-central.storage-download.googleapis.com/maven2",
        "https://mirror.bazel.build/repo1.maven.org/maven2",
        "https://jcenter.bintray.com",
    ],
)
use_repo(rules_scala_maven, "rules_scala_maven")

rules_scala_test_maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
rules_scala_test_maven.install(
    name = "rules_scala_test_maven",
    artifacts = [
        "com.github.jnr:jffi:1.3.13",
        "com.google.guava:guava:21.0",
        "org.apache.commons:commons-lang3:3.18.0",
        "org.springframework:spring-core:6.2.11",
        "org.springframework:spring-tx:6.2.11",
        "org.typelevel:cats-core_2.12:2.13.0",
        "org.typelevel:kind-projector_2.12.20:0.13.3",
    ],
    fetch_sources = True,
    lock_file = "//:rules_scala_test_maven.json",
    repositories = [
        "https://repo.maven.apache.org/maven2",
        "https://maven-central.storage-download.googleapis.com/maven2",
        "https://mirror.bazel.build/repo1.maven.org/maven2",
        "https://jcenter.bintray.com",
    ],
)
use_repo(rules_scala_test_maven, "rules_scala_test_maven")

java_toolchains = use_extension(
    "@rules_java//java:extensions.bzl",
    "toolchains",
    dev_dependency = True,
)
use_repo(
    java_toolchains,
    # //test/toolchains:java21_toolchain
    "remotejdk21_linux",
    "remotejdk21_macos",
    "remotejdk21_win",
    # //test/jmh:test_jmh_jdk8
    "remote_jdk8_linux",
    "remote_jdk8_macos",
    "remote_jdk8_windows",
)

[
    (
        bazel_dep(name = name, dev_dependency = True),
        local_path_override(
            module_name = name,
            path = path,
        ),
    )
    for name, path in [
        (
            "proto_cross_repo_boundary",
            "test/proto_cross_repo_boundary/repo",
        ),
        (
            "test_new_local_repo",
            "third_party/test/new_local_repo",
        ),
        (
            "example_external_workspace",
            "third_party/test/example_external_workspace",
        ),
    ]
]

bazel_dep(
    name = "bazel_ci_rules",
    version = "1.0.0",
    dev_dependency = True,
    repo_name = "bazelci_rules",
)
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2", dev_dependency = True)
bazel_dep(name = "rules_python", version = "1.6.1", dev_dependency = True)
bazel_dep(name = "rules_shell", version = "0.6.1", dev_dependency = True)
